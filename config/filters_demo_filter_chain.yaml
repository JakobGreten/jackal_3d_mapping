grid_map_filters:

  - name: buffer_normalizer
    type: gridMapFilters/BufferNormalizerFilter

  # # Duplicate layer.
  # - name: duplicate
  #   type: gridMapFilters/DuplicationFilter
  #   params:
  #     input_layer: ...
  #     output_layer: ...

  # Delete color layer.
  # - name: delete_original_layers
  #   type: gridMapFilters/DeletionFilter
  #   params:
  #     layers: [color] # List of layers.

  # Fill holes in the map with inpainting.
  # - name: inpaint
  #   type: gridMapCv/InpaintFilter
  #   params:
  #     input_layer: elevation
  #     output_layer: elevation_inpainted
  #     radius: 2.0                                #Eigentlich 0.05!!!
  #     #radius: 0.225                                #Eigentlich 0.05!!!
  #     #radius: 0.05                                 #Eigentlich 0.05!!!
  #     #radius: 1.0                                 #Eigentlich 0.05!!!

  # Reduce noise with a radial blurring filter.
  # - name: mean_in_radius
  #   type: gridMapFilters/MeanInRadiusFilter
  #   params:
  #     input_layer: elevation_inpainted
  #     output_layer: elevation_smooth_mean
  #     radius: 0.12
  #     #radius: 0.27
  #     #radius: 0.06

  # Boxblur as an alternative to the inpaint and radial blurring filter above.
  # - name: boxblur
  #   type: gridMapFilters/SlidingWindowMathExpressionFilter
  #   params:
  #     input_layer: elevation
  #     output_layer: elevation_smooth
  #     expression: meanOfFinites(elevation)
  #     compute_empty_cells: true
  #     edge_handling: crop # options: inside, crop, empty, mean
  #     #window_size: 5 # optional
  #     window_length: 0.1
  #     #window_length: 0.225

  # Compute surface normals.
  - name: surface_normals
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation
      output_layers_prefix: normal_vectors_
      radius: 0.1
      #radius: 0.225
      #radius: 0.5
      normal_vector_positive_axis: z


  # - name: surface_normals_raster
  #   type: gridMapFilters/NormalVectorsFilter
  #   params:
  #     input_layer: elevation_inpainted
  #     algorithm: raster
  #     output_layers_prefix: normal_raster_
  #     normal_vector_positive_axis: z
  #     parallelization_enabled: true
  #     thread_number: 4

  # Add a color layer for visualization based on the surface normal.
  - name: normal_color_map
    type: gridMapFilters/NormalColorMapFilter
    params:
      input_layers_prefix: normal_vectors_
      output_layer: normal_color

  # Compute slope from surface normal.
  - name: slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope
      expression: acos(normal_vectors_z)

  # Compute roughness as absolute difference from map to smoothened map.
  # - name: roughness
  #   type: gridMapFilters/MathExpressionFilter
  #   params:
  #     output_layer: roughness
  #     expression: abs(elevation_inpainted - elevation_smooth)

  # Edge detection by computing the standard deviation from slope.
  # - name: edge_detection
  #   type: gridMapFilters/SlidingWindowMathExpressionFilter
  #   params:
  #     input_layer: slope
  #     output_layer: edges
  #     expression: sqrt(sumOfFinites(square(slope - meanOfFinites(slope))) ./ numberOfFinites(slope)) # Standard deviation
  #     compute_empty_cells: false
  #     edge_handling: crop # options: inside, crop, empty, mean
  #     window_length: 0.1
  #     #window_length: 0.225
  #     #window_length: 0.05

  # # Edge detection on elevation layer with convolution filter as alternative to filter above.
  # - name: edge_detection
  #   type: gridMapFilters/SlidingWindowMathExpressionFilter
  #   params:
  #     input_layer: elevation_inpainted
  #     output_layer: edges
  #     expression: 'sumOfFinites([0,1,0;1,-4,1;0,1,0].*elevation_inpainted)' # Edge detection.
  #     # expression: 'sumOfFinites([0,-1,0;-1,5,-1;0,-1,0].*elevation_inpainted)' # Sharpen.
  #     compute_empty_cells: false
  #     edge_handling: mean # options: inside, crop, empty, mean
  #     window_size: 3 # Make sure to make this compatible with the kernel matrix.

  # Compute traversability as normalized weighted sum of slope and roughness.
  # - name: traversability
  #   type: gridMapFilters/MathExpressionFilter
  #   params:
  #     output_layer: traversability
  #     expression: 0.5 * (1.0 - (slope / 0.6)) + 0.5 * (1.0 - (roughness / 0.1))

  - name: traversability_slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability
      expression: (slope / 0.6)
      #expression: (1.0 - (slope / 0.6)) 


  # # Duplicate layer.
  - name: duplicate
    type: gridMapFilters/DuplicationFilter
    params:
      input_layer: traversability
      output_layer: occupancy

  # # Set lower threshold on traversability.
  - name: traversability_lower_threshold
    type: gridMapFilters/ThresholdFilter
    params:
      layer: occupancy
      lower_threshold: 1.0
      set_to: .nan

  # # Set upper threshold on traversability.
  - name: traversability_upper_threshold
    type: gridMapFilters/ThresholdFilter
    params:
      layer: occupancy
      upper_threshold: 1.0
      set_to: 1.0 # Other uses: .nan, .inf

  